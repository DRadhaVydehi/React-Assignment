{"version":3,"sources":["logo.svg","Components/MailBoxComponent/MailBoxComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","MailBoxComponent","CATEGORIES","id","name","count","useState","inbox","spam","deleted","custom","state","setState","categories","setCategory","active","setActive","from","subject","content","mail","setMail","useEffect","localStorage","getItem","setItem","stateObj","JSON","parse","removeItem","updateCounts","result","map","category","folder","counter","forEach","item","unread","console","log","stringify","className","key","onClick","handleClick","length","mId","setEmail","event","flag","changeFlag","filter","unshift","stopPropagation","deleteEmail","time","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4d5fb7e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from 'react';\nimport './MailBoxComponent.css';\nimport inbox from './json/inbox.json';\nimport spam from './json/spam.json';\nimport deleted from './json/deleted.json';\nimport custom from './json/custom.json';\nimport { Search, Trash, Flag, FlagFill} from 'react-bootstrap-icons';\n\nconst MailBoxComponent = () => {\nconst CATEGORIES=[{\n    id:'inbox',\n    name:'Inbox',\n    count: 0\n},\n{\n    id:'spam',\n    name:'Spam',\n    count: 0\n}, \n{\n    id:'deleted',\n    name:'Deleted Items',\n    count: 0\n}, \n{\n    id:'custom',\n    name:'Custom Folder',\n    count: 0\n}];\n\nconst [state, setState] = useState(\n    {\n    inbox: [],\n    spam:[],\n    deleted: [],\n    custom:[]\n});\n\nconst[categories, setCategory] = useState(CATEGORIES);\n\nconst [active, setActive] = useState('inbox');\nconst [mail, setMail] = useState({\n    from: '',\n    subject: '',\n    content: ''\n});\n\nuseEffect(() => {\n    setState({\n        inbox,\n        spam,\n        deleted,\n        custom\n    });\n    debugger;\n    if (localStorage.getItem(\"active\") === null) {\n        localStorage.setItem(\"active\", active);\n    } else {\n        setActive(localStorage.getItem(\"active\"));\n    }\n    debugger;\n    if (localStorage.getItem(\"state\") !== null) {\n        debugger;\n        let stateObj = localStorage.getItem('state');\n        setState(JSON.parse(stateObj));\n    }\n    return () => localStorage.removeItem(\"active\");\n}, []);\n\nconst updateCounts = () => {\n    let result = CATEGORIES.map(category => {\n        let folder = state[category.id];\n        let counter = 0;\n        folder.forEach(item => {\n            if(item.unread) {\n                counter++;\n            }\n        })\n        console.log(counter);\n        let count = `(${counter})`;\n        let obj = {...category, count:counter};\n        return obj;\n    });\n    console.log(result);\n    setCategory(result);\n}\n\nuseEffect(() => {\n    debugger;\n    localStorage.setItem('state', JSON.stringify(state));\n    updateCounts();\n }, [state]);\n\nconst deleteEmail = (item, event) => {\n    debugger;\n    let result = state[active].filter(mail => item.mId !== mail.mId);\n    let deleted = [...state['deleted']];\n    deleted.unshift(item);\n    setState({\n        ...state,\n        [active]: result,\n        deleted\n    });\n    \n    event.stopPropagation();\n}\n\nconst handleClick = (category) => {\n    setActive(category.id);\n    setMail({});\n    localStorage.setItem(\"active\", category.id);\n}\n\nconst setEmail = (item) => {\n    item.unread = false;\n    setMail(item);\n    updateCounts();\n}\n\nconst changeFlag = (item, event) => {\n    debugger;\n    item.flag = !item.flag;\n    setMail(item);\n   // event.stopPropagation();\n}\n\n  return (\n      \n      <div className=\"container\">\n        <div className=\"row\">\n            <div className=\"col-lg-2 filter-section\">\n                <div className=\"search\">Search Mail and People <Search /></div>\n                <div>\n                <div className=\"heading\">^ Folders</div>\n                {categories.map(category => {\n                    return (\n                    <div\n                        key={category.id}\n                        className={\"category \" + (active === category.id ? 'active' : '')}\n                        onClick={()=> handleClick(category)}>\n                            {category.name}({category.count})\n                    </div>\n                    );\n                })\n\n                }\n                </div>\n            </div>\n            <div className=\"col-lg-3 overview-section\">\n                <div className=\"overview-heading\">\n                    <span className=\"plus\">+ </span>\n                    <span>New</span>\n                    <span className=\"mark\">Mark all as Read</span>\n                </div>\n                <div className=\"heading\"></div>\n                <div className=\"mail-container\">\n                    {state[active].length === 0 ? 'No mails' : null}\n                    {state[active].length > 0 && state[active].map((item) => {\n                        return (\n                            <div key={item.mId} className=\"email-item\" onClick={() => setEmail(item)}>\n                                <div className=\"from\">{item.from}\n                                    <span onClick={(event)=> changeFlag(item, event)}>\n                                        {\n                                            !item.flag ? <Flag /> : <FlagFill />\n                                        }\n                                    </span>\n                                    <span onClick={(event) => deleteEmail(item, event)}>\n                                        <Trash />\n                                    </span>\n                                </div>\n                                <div className=\"subject\">{item.subject}\n                                    <span>{item.time}</span>\n                                </div>\n                                <div className=\"content\">\n                                    \n                                        {item.content}\n                                    \n                                </div>\n                            </div>\n                        );\n                    })\n\n                    }\n                </div>\n            </div>\n            <div className=\"col-lg-7 detail-section\">\n                <div className=\"from\">\n                    {mail.from}\n                </div>\n                <div className=\"subject\">\n                    {mail.subject}\n                </div>\n                <div className=\"mail-content\">\n                        {mail.content}\n                </div>\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default MailBoxComponent;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport inbox from './inbox.json';\nimport MailBoxComponent from './Components/MailBoxComponent/MailBoxComponent';\n\nfunction App() {\n\n //console.log(inbox);\n  return (\n  \n      <MailBoxComponent />\n  \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}